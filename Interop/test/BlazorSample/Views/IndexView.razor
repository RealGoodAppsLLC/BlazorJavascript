@page "/"
@using RealGoodApps.BlazorJavascript.Interop.Extensions
@using RealGoodApps.BlazorJavascript.Interop.Interfaces
@using RealGoodApps.BlazorJavascript.Interop.BuiltIns
@inject IJSRuntime _jsRuntime

<button id="printButton" @onclick="Print" class="myClass" style="color: red">Print</button>
<span id="boop">This is a thing</span>

@code {
    private void Print()
    {
        if (_jsRuntime is not IJSInProcessRuntime jsInProcessRuntime)
        {
            return;
        }

        var window = jsInProcessRuntime.GetWindow();
        window.console.clear();
        window.console.log(jsInProcessRuntime.CreateString("Check this out :)"));
        var values = jsInProcessRuntime.CreateArray<IJSObject>();
        values.push(jsInProcessRuntime.CreateString("Hello Friends :)"));
        values.push(jsInProcessRuntime.CreateString("Goodbye Friends :("));

        var myCallbackFn = jsInProcessRuntime.CreateAction<IString>((str) =>
        {
            Console.WriteLine($"The string is: {str.ConvertToDotNetString()}");
        });

        var filteredArray = values.filter(jsInProcessRuntime.CreateFunc<IString, IBoolean>(str =>
        {
            if (str.ConvertToDotNetString() == "Hello Friends :)")
            {
                return jsInProcessRuntime.CreateBoolean(true);
            }

            return jsInProcessRuntime.CreateBoolean(false);
        }), null);
        
        filteredArray.forEach(myCallbackFn, null);
        // values.forEach(myCallbackFn, null);

        var domIds = jsInProcessRuntime.CreateArray<IString>();
        domIds.push(jsInProcessRuntime.CreateString("printButton"));
        domIds.push(jsInProcessRuntime.CreateString("boop"));

        var domElements = domIds.map<IHTMLElement>(
            jsInProcessRuntime.CreateFunc<IString, IHTMLElement>(selector => window.document.getElementById(selector)), null);

        domElements.forEach(jsInProcessRuntime.CreateAction<IHTMLElement>(elem =>
        {
            Console.WriteLine(elem.outerHTML.ConvertToDotNetString());
        }), null);
        
        var valuesAsNormalArray = values.UnsafeCastTo<IArray<IString>>();
        window.console.log(values);

        var zerothItem = valuesAsNormalArray[jsInProcessRuntime.CreateNumberFromInt(0)];
        var onethItem = valuesAsNormalArray[jsInProcessRuntime.CreateNumberFromInt(1)];

        Console.WriteLine($"arr[0] = {zerothItem.ConvertToDotNetString()}");
        Console.WriteLine($"arr[1] = {onethItem.ConvertToDotNetString()}");

        valuesAsNormalArray[jsInProcessRuntime.CreateNumberFromInt(1)] = jsInProcessRuntime.CreateString("New value");
        var newOnethItem = valuesAsNormalArray[jsInProcessRuntime.CreateNumberFromInt(1)];

        Console.WriteLine($"arr[1] new = {newOnethItem.ConvertToDotNetString()}");

        var results = window.document.getElementsByClassName(jsInProcessRuntime.CreateString("myClass"));
        Console.WriteLine($"Number of elements in collection: {results.length.ConvertToDotNetInt()}");

        var firstElementInCollection = results.item(jsInProcessRuntime.CreateNumberFromInt(0));
        Console.WriteLine($"Element tag name: {firstElementInCollection.tagName.ConvertToDotNetString()}");

        var printButtonElement = window.document.getElementById(jsInProcessRuntime.CreateString("printButton"));
        var computedStyle = window.getComputedStyle(printButtonElement, null);

        Console.WriteLine(printButtonElement.innerText.ConvertToDotNetString());
        Console.WriteLine(computedStyle.color.ConvertToDotNetString());

        var now = window.Date.now();
        // Console.WriteLine($"It is: {now.IsNaN()}");
        // Console.WriteLine($"It is: {now.IsInteger()}");
        // Console.WriteLine($"It is: {now.ConvertToDotNetLong()}");

        var body = window.document.body;
        var appendChildFunction = body.GetPropertyOfObject<IFunction>("appendChild");
        if (appendChildFunction == null)
        {
            return;
        }
        var newElement = window.document.createElement(jsInProcessRuntime.CreateString("button"), null).UnsafeCastTo<IHTMLButtonElement>();
        appendChildFunction.InvokeVoid(body, newElement);
        newElement.disabled = jsInProcessRuntime.CreateBoolean(true);
        newElement.innerText = jsInProcessRuntime.CreateString("My Button");
        window.document.title = jsInProcessRuntime.CreateString("Well hello, there!");

        var date = window.Date.construct();
        var date2 = window.Date.construct(
            jsInProcessRuntime.CreateNumberFromInt(2022),
            jsInProcessRuntime.CreateNumberFromInt(4),
            jsInProcessRuntime.CreateNumberFromInt(5),
            jsInProcessRuntime.CreateNumberFromInt(3),
            jsInProcessRuntime.CreateNumberFromInt(20),
            jsInProcessRuntime.CreateNumberFromInt(22),
            jsInProcessRuntime.CreateNumberFromInt(0));

        Console.WriteLine(date.toLocaleString().ConvertToDotNetString());
        Console.WriteLine(date2.toLocaleString().ConvertToDotNetString());

        var anchorElement = window.document.createElement(jsInProcessRuntime.CreateString("a"), null).UnsafeCastTo<IHTMLAnchorElement>();
        anchorElement.setAttribute(jsInProcessRuntime.CreateString("href"), jsInProcessRuntime.CreateString("https://google.com"));
        var attributes = anchorElement.getAttributeNames();
        var firstAttributeName = attributes[jsInProcessRuntime.CreateNumberFromInt(0)];
        Console.WriteLine($"First attribute name is: {firstAttributeName.ConvertToDotNetString()}");
        var someArray = jsInProcessRuntime.CreateArray();
        var magicArray = window.Array.construct(jsInProcessRuntime.CreateNumberFromInt(0));

        foreach (var theArray in new[] { someArray, magicArray })
        {
            var initialLength = theArray.length;
            Console.WriteLine($"Initial array length: {initialLength.ConvertToDotNetInt()}");
            var pushResult1 = theArray.push(date);
            Console.WriteLine($"Push result 1: {pushResult1.ConvertToDotNetInt()}");
            var pushResult2 = theArray.push(date2);
            Console.WriteLine($"Push result 2: {pushResult2.ConvertToDotNetInt()}");

            var secondItem = theArray[jsInProcessRuntime.CreateNumberFromInt(1)].UnsafeCastTo<IDate>();
            Console.WriteLine(secondItem.toLocaleDateString().ConvertToDotNetString());
        }
    }
}
