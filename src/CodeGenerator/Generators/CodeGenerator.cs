using System.Text;
using RealGoodApps.BlazorJavascript.CodeGenerator.Models;

namespace RealGoodApps.BlazorJavascript.CodeGenerator.Generators;

public class CodeGenerator
{
    private readonly ParsedInfo _parsedInfo;
    private readonly string _outputDirectory;

    public CodeGenerator(
        ParsedInfo parsedInfo,
        string outputDirectory)
    {
        _parsedInfo = parsedInfo;
        _outputDirectory = outputDirectory;
    }

    public void Generate()
    {
        foreach (var interfaceInfo in _parsedInfo.Interfaces)
        {
            var contents = GenerateInterfaceFileContents(interfaceInfo);

            var interfaceOutputPath = Path.Combine(
                _outputDirectory,
                $"{interfaceInfo.Name}.cs");

            if (File.Exists(interfaceOutputPath))
            {
                throw new Exception($"File already exists: {interfaceOutputPath}");
            }

            File.WriteAllText(interfaceOutputPath, contents);
        }
    }

    private string GenerateInterfaceFileContents(InterfaceInfo interfaceInfo)
    {
        var stringBuilder = new StringBuilder();

        stringBuilder.AppendLine("/// <auto-generated />");
        stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Interfaces");
        stringBuilder.AppendLine("{");

        stringBuilder.Append($"  public interface {interfaceInfo.Name}");

        if (interfaceInfo.ExtendsList.Any())
        {
            stringBuilder.Append($" : {string.Join(", ", interfaceInfo.ExtendsList)}");
        }

        stringBuilder.Append(Environment.NewLine);

        stringBuilder.AppendLine("  {");

        foreach (var methodInfo in interfaceInfo.Methods)
        {
            // FIXME: We are skipping any methods that are not simple enough for a 1 to 1 translation.
            //        For example, nothing with generics, union types, intersection types, or function parameters.
            if (methodInfo.ExtractTypeParametersResult.TypeParameters.Any())
            {
                continue;
            }

            if (methodInfo.ReturnType.Single == null)
            {
                continue;
            }

            if (methodInfo.Parameters.Any(parameterInfo => parameterInfo.Type.Single == null))
            {
                continue;
            }

            // FIXME: It would be nice to carry over any comments from the TypeScript definitions.
            stringBuilder.Append("    ");
            stringBuilder.Append(methodInfo.ReturnType.Single.Name);
            stringBuilder.Append(' ');
            stringBuilder.Append(methodInfo.Name);
            stringBuilder.Append('(');
            stringBuilder.Append(");");
            stringBuilder.Append(Environment.NewLine);
        }

        stringBuilder.AppendLine("  }");
        stringBuilder.AppendLine("}");

        return stringBuilder.ToString();
    }
}
