using RealGoodApps.ValueImmutableCollections;
using System.Text;
using RealGoodApps.BlazorJavascript.CodeGenerator.Models.Processed;

namespace RealGoodApps.BlazorJavascript.CodeGenerator
{
    public class CodeGenerator
    {
        private readonly ProcessedInfo _processedInfo;
        private readonly string _outputDirectory;

        public CodeGenerator(
            ProcessedInfo processedInfo,
            string outputDirectory)
        {
            _processedInfo = processedInfo;
            _outputDirectory = outputDirectory;
        }

        public void Generate()
        {
            foreach (var interfaceInfo in _processedInfo.Interfaces.Items)
            {
                var interfaceFileContents = RenderInterfaceFileContents(interfaceInfo);

                var interfaceOutputPath = Path.Combine(
                    _outputDirectory,
                    "Interfaces",
                    $"{interfaceInfo.InterfaceName}.cs");

                if (File.Exists(interfaceOutputPath))
                {
                    throw new Exception($"File already exists: {interfaceOutputPath}");
                }

                File.WriteAllText(interfaceOutputPath, interfaceFileContents);
            }

            foreach (var classInfo in _processedInfo.Classes.Items)
            {
                var classFileContents = RenderClassFileContents(classInfo);

                var classOutputPath = Path.Combine(
                    _outputDirectory,
                    "Classes",
                    $"{classInfo.ClassName}.cs");

                if (File.Exists(classOutputPath))
                {
                    throw new Exception($"File already exists: {classOutputPath}");
                }

                File.WriteAllText(classOutputPath, classFileContents);
            }
            
            // Generate our CreateFunctionExtensions that has CreateAction() and CreateFunc() overloads.
            var createFunctionExtensionsFileContents = RenderCreateFunctionExtensionsFileContents();

            var createFunctionExtensionsOutputPath = Path.Combine(
                _outputDirectory,
                "Extensions",
                "CreateFunctionExtensions.cs");

            if (File.Exists(createFunctionExtensionsOutputPath))
            {
                throw new Exception($"File already exists: {createFunctionExtensionsOutputPath}");
            }

            File.WriteAllText(createFunctionExtensionsOutputPath, createFunctionExtensionsFileContents);
            
            // Generate our InvokableActionWrappers and InvokableFuncWrappers.
            var invokableFunctionsFileContents = RenderInvokableFunctionsFileContents();

            var invokableFunctionsOutputPath = Path.Combine(
                _outputDirectory,
                "Functions",
                "InvokableFunctions.cs");

            if (File.Exists(invokableFunctionsOutputPath))
            {
                throw new Exception($"File already exists: {invokableFunctionsOutputPath}");
            }

            File.WriteAllText(invokableFunctionsOutputPath, invokableFunctionsFileContents);

            // Generate our CallConstructor overloads
            var constructorsFileContents = RenderConstructorsFileContents();

            var constructorsOutputPath = Path.Combine(
                _outputDirectory,
                "Constructors",
                "Constructors.cs");

            if (File.Exists(constructorsOutputPath))
            {
                throw new Exception($"File already exists: {constructorsOutputPath}");
            }

            File.WriteAllText(constructorsOutputPath, constructorsFileContents);

            // Generate our InvokeMethodByName and InvokeVoidMethodByName overloads
            var methodsFileContents = RenderMethodsFileContents();

            var methodsOutputPath = Path.Combine(
                _outputDirectory,
                "Methods",
                "Methods.cs");

            if (File.Exists(methodsOutputPath))
            {
                throw new Exception($"File already exists: {methodsOutputPath}");
            }

            File.WriteAllText(methodsOutputPath, methodsFileContents);
        }

        private static string RenderInterfaceFileContents(ProcessedInterfaceInfo interfaceInfo)
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("// <auto-generated />");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Attributes;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.BuiltIns;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Classes;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Interfaces");
            stringBuilder.AppendLine("{");

            stringBuilder.AppendLine($"{RenderIndent(1)}[JSObjectConstructor(typeof({interfaceInfo.InterfaceConstructor}))]");

            var typeParametersRendered = RenderTypeParameters(interfaceInfo.TypeParameters);

            stringBuilder.Append($"{RenderIndent(1)}public interface {interfaceInfo.InterfaceName}{typeParametersRendered}");

            stringBuilder.Append(" : ");

            foreach (var chainItem in interfaceInfo.ExtendsChain.Items)
            {
                stringBuilder.Append(chainItem.TypeReference.TypeName);
                stringBuilder.Append(", ");
            }

            stringBuilder.Append("IJSObject");
            stringBuilder.Append(Environment.NewLine);

            var typeParameterConstraints = RenderTypeParameterConstraints(interfaceInfo.TypeParameters);

            if (!string.IsNullOrWhiteSpace(typeParameterConstraints))
            {
                stringBuilder.AppendLine(RenderIndented(
                    typeParameterConstraints,
                    2));
            }

            stringBuilder.AppendLine(RenderIndent(1) + "{");

            var isFirstInterfaceElement = true;

            foreach (var constructor in interfaceInfo.Constructors.Items)
            {
                if (!isFirstInterfaceElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndented(
                    RenderMethodOrConstructorForInterface(
                        constructor.ConstructorName,
                        true,
                        null,
                        constructor.TypeParameters,
                        constructor.Parameters,
                        constructor.ReturnType,
                        null),
                    2));

                isFirstInterfaceElement = false;
            }

            foreach (var method in interfaceInfo.Methods.Items)
            {
                if (!isFirstInterfaceElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndented(
                    RenderMethodOrConstructorForInterface(
                        method.MethodName,
                        false,
                        method.NativeMethodName,
                        method.TypeParameters,
                        method.Parameters,
                        method.ReturnType,
                        null),
                    2));

                isFirstInterfaceElement = false;
            }

            foreach (var property in interfaceInfo.Properties.Items)
            {
                if (!isFirstInterfaceElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndented(
                    RenderPropertyForInterface(property, null),
                    2));

                isFirstInterfaceElement = false;
            }

            foreach (var indexer in interfaceInfo.Indexers.Items)
            {
                if (!isFirstInterfaceElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndented(
                    RenderIndexerForInterface(indexer, null),
                    2));

                isFirstInterfaceElement = false;
            }

            stringBuilder.AppendLine(RenderIndent(1) + "}");
            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }

        private static string RenderClassFileContents(ProcessedClassInfo classInfo)
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("// <auto-generated />");
            stringBuilder.AppendLine("using Microsoft.JSInterop;");
            stringBuilder.AppendLine("using System;");
            stringBuilder.AppendLine("using System.Collections.Generic;");
            stringBuilder.AppendLine("using System.Linq;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Attributes;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.BuiltIns;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Extensions;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Interfaces;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Classes");
            stringBuilder.AppendLine("{");

            var typeParametersRendered = RenderTypeParameters(classInfo.TypeParameters);

            stringBuilder.AppendLine($"{RenderIndent(1)}public class {classInfo.ClassName}{typeParametersRendered} : {classInfo.InterfaceName}{typeParametersRendered}, IJSObject");

            var typeParameterConstraints = RenderTypeParameterConstraints(classInfo.TypeParameters);

            if (!string.IsNullOrWhiteSpace(typeParameterConstraints))
            {
                stringBuilder.AppendLine(RenderIndented(
                    typeParameterConstraints,
                    2));
            }

            stringBuilder.AppendLine(RenderIndent(1) + "{");

            stringBuilder.AppendLine(RenderIndent(2) + $"public {classInfo.ClassName}(IJSInProcessRuntime jsInProcessRuntime, IJSObjectReference jsObjectReference)");
            stringBuilder.AppendLine(RenderIndent(2) + "{");
            stringBuilder.AppendLine(RenderIndent(3) + "Runtime = jsInProcessRuntime;");
            stringBuilder.AppendLine(RenderIndent(3) + "ObjectReference = jsObjectReference;");
            stringBuilder.AppendLine(RenderIndent(2) + "}");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine(RenderIndent(2) + "public IJSInProcessRuntime Runtime { get; }");
            stringBuilder.AppendLine(RenderIndent(2) + "public IJSObjectReference ObjectReference { get; }");

            foreach (var implementation in classInfo.Implementations.Items)
            {
                var implementationContents = RenderClassImplementation(implementation);

                if (string.IsNullOrWhiteSpace(implementationContents))
                {
                    continue;
                }

                stringBuilder.AppendLine();
                stringBuilder.AppendLine(RenderIndented(implementationContents, 2));
            }

            stringBuilder.AppendLine(RenderIndent(1) + "}");
            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }

        private static string RenderTypeParametersForFunctions(int argumentCount, bool hasReturnValue)
        {
            var typeParametersStringBuilder = new StringBuilder();

            if (hasReturnValue || argumentCount > 0)
            {
                typeParametersStringBuilder.Append('<');

                for (var argumentIndex = 0; argumentIndex < argumentCount; argumentIndex++)
                {
                    if (argumentIndex > 0)
                    {
                        typeParametersStringBuilder.Append(", ");
                    }
                        
                    typeParametersStringBuilder.Append($"PJSObject{argumentIndex}");
                }

                if (hasReturnValue)
                {
                    if (argumentCount > 0)
                    {
                        typeParametersStringBuilder.Append(", ");
                    }

                    typeParametersStringBuilder.Append("TJSObject");
                }
                
                typeParametersStringBuilder.Append('>');
            }

            return typeParametersStringBuilder.ToString();
        }

        private static string RenderConstraintsForFunctions(int argumentCount, bool hasReturnValue)
        {
            var constraintsStringBuilder = new StringBuilder();

            if (hasReturnValue)
            {
                constraintsStringBuilder.Append("where TJSObject : class, IJSObject");
            }
            
            if (argumentCount > 0)
            {
                for (var argumentIndex = 0; argumentIndex < argumentCount; argumentIndex++)
                {
                    if (hasReturnValue || argumentIndex > 0)
                    {
                        constraintsStringBuilder.Append(Environment.NewLine);
                    }
                    
                    constraintsStringBuilder.Append($"where PJSObject{argumentIndex} : class, IJSObject");
                }
            }

            return constraintsStringBuilder.ToString();
        }
        
        private static string RenderCreateFunctionExtensionsFileContents()
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("// <auto-generated />");
            stringBuilder.AppendLine("using Microsoft.JSInterop;");
            stringBuilder.AppendLine("using System;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.BuiltIns;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Classes;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Factories;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Interfaces;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Extensions");
            stringBuilder.AppendLine("{");

            stringBuilder.AppendLine(RenderIndent(1) + "public static class CreateFunctionExtensions");
            stringBuilder.AppendLine(RenderIndent(1) + "{");
            
            for (var argumentCount = 0; argumentCount <= 16; argumentCount++)
            {
                var typeParametersString = RenderTypeParametersForFunctions(argumentCount, false);
                
                stringBuilder.AppendLine(RenderIndent(2) + $"public static IFunction CreateAction{typeParametersString}(this IJSInProcessRuntime jsRuntime, Action{typeParametersString} action)");

                if (argumentCount > 0)
                {
                    stringBuilder.AppendLine(RenderIndented(RenderConstraintsForFunctions(argumentCount, false), 3));
                }
                
                stringBuilder.AppendLine(RenderIndent(2) + "{");

                // FIXME: We need to implement some sort of disposing of `DotNetObjectReference` calls.
                stringBuilder.AppendLine(RenderIndent(3) + $"var trampoline = new InvokableActionWrapper{typeParametersString}(jsRuntime, action);");
                stringBuilder.AppendLine(RenderIndent(3) + $"var actionReference = jsRuntime.Invoke<IJSObjectReference>(\"__blazorJavascript_constructAction\", DotNetObjectReference.Create(trampoline), {argumentCount});");
                stringBuilder.AppendLine(RenderIndent(3) + $"return JSObjectFactory.CreateFromRuntimeObjectReference<IFunction>(jsRuntime, actionReference)!;");
                
                stringBuilder.AppendLine(RenderIndent(2) + "}");
            }
            
            for (var argumentCount = 0; argumentCount <= 15; argumentCount++)
            {
                var typeParametersString = RenderTypeParametersForFunctions(argumentCount, true);
                
                stringBuilder.AppendLine(RenderIndent(2) + $"public static IFunction CreateFunc{typeParametersString}(this IJSInProcessRuntime jsRuntime, Func{typeParametersString} func)");
                
                stringBuilder.AppendLine(RenderIndented(RenderConstraintsForFunctions(argumentCount, true), 3));

                stringBuilder.AppendLine(RenderIndent(2) + "{");

                // FIXME: We need to implement some sort of disposing of `DotNetObjectReference` calls.
                stringBuilder.AppendLine(RenderIndent(3) + $"var trampoline = new InvokableFuncWrapper{typeParametersString}(jsRuntime, func);");
                stringBuilder.AppendLine(RenderIndent(3) + $"var funcReference = jsRuntime.Invoke<IJSObjectReference>(\"__blazorJavascript_constructFunc\", DotNetObjectReference.Create(trampoline), {argumentCount});");
                stringBuilder.AppendLine(RenderIndent(3) + "return JSObjectFactory.CreateFromRuntimeObjectReference<IFunction>(jsRuntime, funcReference)!;");
                
                stringBuilder.AppendLine(RenderIndent(2) + "}");
            }
            
            stringBuilder.AppendLine(RenderIndent(1) + "}");
            
            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }
        
        private static string RenderInvokableFunctionsFileContents()
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("// <auto-generated />");
            stringBuilder.AppendLine("using Microsoft.JSInterop;");
            stringBuilder.AppendLine("using System;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.BuiltIns;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Classes;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Factories;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Interfaces;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Extensions");
            stringBuilder.AppendLine("{");

            for (var argumentCount = 0; argumentCount <= 16; argumentCount++)
            {
                var typeParametersString = RenderTypeParametersForFunctions(argumentCount, false);
                
                stringBuilder.AppendLine(RenderIndent(1) + $"public class InvokableActionWrapper{typeParametersString}");

                if (argumentCount > 0)
                {
                    stringBuilder.AppendLine(RenderIndented(RenderConstraintsForFunctions(argumentCount, false), 2));
                }
                
                stringBuilder.AppendLine(RenderIndent(1) + "{");
                stringBuilder.AppendLine(RenderIndent(2) + "private readonly IJSInProcessRuntime jsInProcessRuntime;");
                stringBuilder.AppendLine(RenderIndent(2) + $"private readonly Action{typeParametersString} action;");
                stringBuilder.AppendLine();
                stringBuilder.AppendLine(RenderIndent(2) + $"public InvokableActionWrapper(IJSInProcessRuntime jsInProcessRuntime, Action{typeParametersString} action)");
                stringBuilder.AppendLine(RenderIndent(2) + "{");
                stringBuilder.AppendLine(RenderIndent(3) + "this.jsInProcessRuntime = jsInProcessRuntime;");
                stringBuilder.AppendLine(RenderIndent(3) + "this.action = action;");
                stringBuilder.AppendLine(RenderIndent(2) + "}");
                stringBuilder.AppendLine();
                stringBuilder.AppendLine(RenderIndent(2) + "[JSInvokable]");

                var parametersSignature = RenderParametersSignatureForFunctions(argumentCount);
                
                stringBuilder.AppendLine(RenderIndent(2) + $"public void InvokeAction({parametersSignature})");
                stringBuilder.AppendLine(RenderIndent(2) + "{");

                var parametersMarshallingString = RenderParametersMarshallingForFunctions(argumentCount);

                if (argumentCount > 0)
                {
                    stringBuilder.AppendLine(RenderIndented(parametersMarshallingString, 3));
                }

                var parametersPassingToFunctionString = RenderParametersPassingForFunctions(argumentCount);
                
                stringBuilder.AppendLine(RenderIndent(3) + $"this.action.Invoke({parametersPassingToFunctionString});");
                stringBuilder.AppendLine(RenderIndent(2) + "}");

                stringBuilder.AppendLine(RenderIndent(1) + "}");
            }
            
            for (var argumentCount = 0; argumentCount <= 15; argumentCount++)
            {
                var typeParametersString = RenderTypeParametersForFunctions(argumentCount, true);
                
                stringBuilder.AppendLine(RenderIndent(1) + $"public class InvokableFuncWrapper{typeParametersString}");
                
                stringBuilder.AppendLine(RenderIndented(RenderConstraintsForFunctions(argumentCount, true), 2));

                stringBuilder.AppendLine(RenderIndent(1) + "{");
                stringBuilder.AppendLine(RenderIndent(2) + "private readonly IJSInProcessRuntime jsInProcessRuntime;");
                stringBuilder.AppendLine(RenderIndent(2) + $"private readonly Func{typeParametersString} func;");
                stringBuilder.AppendLine();
                stringBuilder.AppendLine(RenderIndent(2) + $"public InvokableFuncWrapper(IJSInProcessRuntime jsInProcessRuntime, Func{typeParametersString} func)");
                stringBuilder.AppendLine(RenderIndent(2) + "{");
                stringBuilder.AppendLine(RenderIndent(3) + "this.jsInProcessRuntime = jsInProcessRuntime;");
                stringBuilder.AppendLine(RenderIndent(3) + "this.func = func;");
                stringBuilder.AppendLine(RenderIndent(2) + "}");
                stringBuilder.AppendLine();
                stringBuilder.AppendLine(RenderIndent(2) + "[JSInvokable]");

                var parametersSignature = RenderParametersSignatureForFunctions(argumentCount);
                
                stringBuilder.AppendLine(RenderIndent(2) + $"public string InvokeFunc({parametersSignature})");
                stringBuilder.AppendLine(RenderIndent(2) + "{");

                var parametersMarshallingString = RenderParametersMarshallingForFunctions(argumentCount);

                if (argumentCount > 0)
                {
                    stringBuilder.AppendLine(RenderIndented(parametersMarshallingString, 3));
                }

                var parametersPassingToFunctionString = RenderParametersPassingForFunctions(argumentCount);
                
                stringBuilder.AppendLine(RenderIndent(3) + $"var returnValue = this.func.Invoke({parametersPassingToFunctionString});");
                stringBuilder.AppendLine(RenderIndent(3) + $"var returnValueIdentifier = this.jsInProcessRuntime.Invoke<string>(\"__blazorJavascript_storeReturnValue\", returnValue?.ObjectReference);");
                stringBuilder.AppendLine(RenderIndent(3) + "return returnValueIdentifier;");
                stringBuilder.AppendLine(RenderIndent(2) + "}");

                stringBuilder.AppendLine(RenderIndent(1) + "}");
            }

            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }

        private static string RenderConstructorsFileContents()
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("// <auto-generated />");
            stringBuilder.AppendLine("using Microsoft.JSInterop;");
            stringBuilder.AppendLine("using System;");
            stringBuilder.AppendLine("using System.Collections.Generic;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.BuiltIns;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Classes;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Factories;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Interfaces;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Extensions");
            stringBuilder.AppendLine("{");

            stringBuilder.AppendLine(RenderIndent(1) + "public static class ConstructorExtensions");
            stringBuilder.AppendLine(RenderIndent(1) + "{");

            for (var argumentCount = 1; argumentCount <= 16; argumentCount++)
            {
                var parameterListStringBuilder = new StringBuilder();
                var parameterNamesStringBuilder = new StringBuilder();

                for (var argumentIndex = 0; argumentIndex < argumentCount; argumentIndex++)
                {
                    if (argumentIndex > 0)
                    {
                        parameterNamesStringBuilder.Append(", ");
                    }

                    parameterListStringBuilder.Append($"IJSObject param{argumentIndex}, ");
                    parameterNamesStringBuilder.Append($"param{argumentIndex}");
                }

                stringBuilder.AppendLine(RenderIndent(2) + $"public static TJSObject CallConstructor<TJSObject>(this IJSObject self, {parameterListStringBuilder}params IJSObject[] additionalParams)");
                stringBuilder.AppendLine(RenderIndent(3) + "where TJSObject : class, IJSObject");
                stringBuilder.AppendLine(RenderIndent(2) + "{");
                stringBuilder.AppendLine(RenderIndent(3) + $"var allArgs = new List<IJSObject> {{ {parameterNamesStringBuilder} }};");
                stringBuilder.AppendLine(RenderIndent(3) + "if (additionalParams == null)");
                stringBuilder.AppendLine(RenderIndent(3) + "{");
                stringBuilder.AppendLine(RenderIndent(4) + "allArgs.Add(null);");
                stringBuilder.AppendLine(RenderIndent(3) + "}");
                stringBuilder.AppendLine(RenderIndent(3) + "else");
                stringBuilder.AppendLine(RenderIndent(3) + "{");
                stringBuilder.AppendLine(RenderIndent(4) + "allArgs.AddRange(additionalParams);");
                stringBuilder.AppendLine(RenderIndent(3) + "}");
                stringBuilder.AppendLine(RenderIndent(3) + "return self.CallConstructor<TJSObject>(allArgs.ToArray());");
                stringBuilder.AppendLine(RenderIndent(2) + "}");
            }

            stringBuilder.AppendLine(RenderIndent(1) + "}");

            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }

        private static string RenderMethodsFileContents()
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("// <auto-generated />");
            stringBuilder.AppendLine("using Microsoft.JSInterop;");
            stringBuilder.AppendLine("using System;");
            stringBuilder.AppendLine("using System.Collections.Generic;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.BuiltIns;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Classes;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Factories;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Interfaces;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Extensions");
            stringBuilder.AppendLine("{");

            stringBuilder.AppendLine(RenderIndent(1) + "public static class MethodExtensions");
            stringBuilder.AppendLine(RenderIndent(1) + "{");

            for (var argumentCount = 0; argumentCount <= 16; argumentCount++)
            {
                var parameterListStringBuilder = new StringBuilder();
                var parameterNamesStringBuilder = new StringBuilder();

                for (var argumentIndex = 0; argumentIndex < argumentCount; argumentIndex++)
                {
                    if (argumentIndex > 0)
                    {
                        parameterNamesStringBuilder.Append(", ");
                    }

                    parameterListStringBuilder.Append($"IJSObject param{argumentIndex}, ");
                    parameterNamesStringBuilder.Append($"param{argumentIndex}");
                }

                stringBuilder.AppendLine(RenderIndent(2) + $"public static TJSObject InvokeMethodByName<TJSObject>(this IJSObject self, string methodName, {parameterListStringBuilder}params IJSObject[] additionalParams)");
                stringBuilder.AppendLine(RenderIndent(3) + "where TJSObject : class, IJSObject");
                stringBuilder.AppendLine(RenderIndent(2) + "{");
                stringBuilder.AppendLine(RenderIndent(3) + $"var allArgs = new List<IJSObject> {{ {parameterNamesStringBuilder} }};");
                stringBuilder.AppendLine(RenderIndent(3) + "if (additionalParams == null)");
                stringBuilder.AppendLine(RenderIndent(3) + "{");
                stringBuilder.AppendLine(RenderIndent(4) + "allArgs.Add(null);");
                stringBuilder.AppendLine(RenderIndent(3) + "}");
                stringBuilder.AppendLine(RenderIndent(3) + "else");
                stringBuilder.AppendLine(RenderIndent(3) + "{");
                stringBuilder.AppendLine(RenderIndent(4) + "allArgs.AddRange(additionalParams);");
                stringBuilder.AppendLine(RenderIndent(3) + "}");
                stringBuilder.AppendLine(RenderIndent(3) + "var methodObj = self.GetPropertyOfObject<IFunction>(methodName);");
                stringBuilder.AppendLine(RenderIndent(3) + "return methodObj.Invoke<TJSObject>(self, allArgs.ToArray());");
                stringBuilder.AppendLine(RenderIndent(2) + "}");
                stringBuilder.AppendLine();
                stringBuilder.AppendLine(RenderIndent(2) + $"public static void InvokeVoidMethodByName(this IJSObject self, string methodName, {parameterListStringBuilder}params IJSObject[] additionalParams)");
                stringBuilder.AppendLine(RenderIndent(2) + "{");
                stringBuilder.AppendLine(RenderIndent(3) + $"var allArgs = new List<IJSObject> {{ {parameterNamesStringBuilder} }};");
                stringBuilder.AppendLine(RenderIndent(3) + "if (additionalParams == null)");
                stringBuilder.AppendLine(RenderIndent(3) + "{");
                stringBuilder.AppendLine(RenderIndent(4) + "allArgs.Add(null);");
                stringBuilder.AppendLine(RenderIndent(3) + "}");
                stringBuilder.AppendLine(RenderIndent(3) + "else");
                stringBuilder.AppendLine(RenderIndent(3) + "{");
                stringBuilder.AppendLine(RenderIndent(4) + "allArgs.AddRange(additionalParams);");
                stringBuilder.AppendLine(RenderIndent(3) + "}");
                stringBuilder.AppendLine(RenderIndent(3) + "var methodObj = self.GetPropertyOfObject<IFunction>(methodName);");
                stringBuilder.AppendLine(RenderIndent(3) + "methodObj.InvokeVoid(self, allArgs.ToArray());");
                stringBuilder.AppendLine(RenderIndent(2) + "}");
            }

            stringBuilder.AppendLine(RenderIndent(1) + "}");

            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }

        private static string RenderParametersPassingForFunctions(int argumentCount)
        {
            var stringBuilder = new StringBuilder();

            for (var argumentIndex = 0; argumentIndex < argumentCount; argumentIndex++)
            {
                if (argumentIndex > 0)
                {
                    stringBuilder.Append(", ");
                }

                stringBuilder.Append($"param{argumentIndex}AsObject");
            }

            return stringBuilder.ToString();
        }

        private static string RenderParametersMarshallingForFunctions(int argumentCount)
        {
            var stringBuilder = new StringBuilder();

            for (var argumentIndex = 0; argumentIndex < argumentCount; argumentIndex++)
            {
                if (argumentIndex > 0)
                {
                    stringBuilder.Append(Environment.NewLine);
                }
                
                stringBuilder.AppendLine($"var param{argumentIndex} = this.jsInProcessRuntime.Invoke<IJSObjectReference>(\"__blazorJavascript_getParamByIdentifier\", param{argumentIndex}Identifier);");
                stringBuilder.Append($"var param{argumentIndex}AsObject = JSObjectFactory.CreateFromRuntimeObjectReference<PJSObject{argumentIndex}>(this.jsInProcessRuntime, param{argumentIndex});");
            }

            return stringBuilder.ToString();
        }

        private static string RenderParametersSignatureForFunctions(int argumentCount)
        {
            var stringBuilder = new StringBuilder();

            for (var argumentIndex = 0; argumentIndex < argumentCount; argumentIndex++)
            {
                if (argumentIndex > 0)
                {
                    stringBuilder.Append(", ");
                }
                
                stringBuilder.Append($"string param{argumentIndex}Identifier");
            }

            return stringBuilder.ToString();
        }

        private static string RenderClassImplementation(ProcessedClassImplementationInfo implementationInfo)
        {
            var stringBuilder = new StringBuilder();

            var isFirstElement = true;

            foreach (var constructor in implementationInfo.Constructors.Items)
            {
                if (!isFirstElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderMethodOrConstructorForInterface(
                    constructor.ConstructorName,
                    true,
                    null,
                    constructor.TypeParameters,
                    constructor.Parameters,
                    constructor.ReturnType,
                    implementationInfo.Prefix));

                isFirstElement = false;
            }

            foreach (var method in implementationInfo.Methods.Items)
            {
                if (!isFirstElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderMethodOrConstructorForInterface(
                    method.MethodName,
                    false,
                    method.NativeMethodName,
                    method.TypeParameters,
                    method.Parameters,
                    method.ReturnType,
                    implementationInfo.Prefix));

                isFirstElement = false;
            }

            foreach (var property in implementationInfo.Properties.Items)
            {
                if (!isFirstElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderPropertyForInterface(property, implementationInfo.Prefix));
                isFirstElement = false;
            }

            foreach (var indexer in implementationInfo.Indexers.Items)
            {
                if (!isFirstElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndexerForInterface(indexer, implementationInfo.Prefix));
                isFirstElement = false;
            }

            return stringBuilder.ToString();
        }

        private static string RenderTypeParameters(ProcessedTypeParametersInfo typeParameters)
        {
            var typeParametersRendered = new StringBuilder();

            if (typeParameters.Items.Any())
            {
                typeParametersRendered.Append('<');
                typeParametersRendered.Append(string.Join(", ", typeParameters
                    .Items
                    .Select(i => i.Name)
                    .ToValueImmutableList()));
                typeParametersRendered.Append('>');
            }

            return typeParametersRendered.ToString();
        }

        private static string RenderTypeParameterConstraints(ProcessedTypeParametersInfo typeParameters)
        {
            var constraintsRendered = new StringBuilder();

            var isFirst = true;

            foreach (var typeParameter in typeParameters.Items)
            {
                if (!isFirst)
                {
                    constraintsRendered.Append(Environment.NewLine);
                }

                var constraintPart = typeParameter.Constraint == null
                    ? string.Empty
                    : $"{typeParameter.Constraint.Name}, ";

                constraintsRendered.Append($"where {typeParameter.Name} : class, {constraintPart}IJSObject");
                isFirst = false;
            }

            return constraintsRendered.ToString();
        }

        private static string RenderIndented(string text, int levels)
        {
            var indent = RenderIndent(levels);
            var lines = text.SplitIntoLines();

            var indentedString = new StringBuilder();

            var isFirst = true;

            foreach (var line in lines)
            {
                if (!isFirst)
                {
                    indentedString.Append(Environment.NewLine);
                }

                indentedString.Append($"{indent}{line}");
                isFirst = false;
            }

            return indentedString.ToString();
        }

        private static string RenderParameters(ProcessedParametersInfo parameters)
        {
            var parametersRendered = new StringBuilder();

            var isFirst = true;

            foreach (var parameter in parameters.Items)
            {
                if (!isFirst)
                {
                    parametersRendered.Append(", ");
                }

                parametersRendered.Append(RenderParameter(parameter));
                isFirst = false;
            }

            return parametersRendered.ToString();
        }

        private static string RenderParametersWithDotDotDotSupport(ProcessedParametersInfo parameters)
        {
            if (parameters.Items.Count == 0)
            {
                return "Array.Empty<IJSObject>()";
            }

            var parameterNamesRendered = new StringBuilder();

            for (var parameterIndex = 0; parameterIndex < parameters.Items.Count; parameterIndex++)
            {
                var parameter = parameters.Items[parameterIndex];

                if (parameterIndex > 0)
                {
                    parameterNamesRendered.Append(", ");
                }

                if (parameter.IsDotDotDot)
                {
                    parameterNamesRendered.Append($"{parameter.Name}?.ToArray()");
                }
                else
                {
                    parameterNamesRendered.Append(parameter.Name);
                }
            }

            return parameterNamesRendered.ToString();
        }

        private static string RenderMethodOrConstructorForInterface(
            string methodOrConstructorName,
            bool isConstructor,
            string? internalMethodName,
            ProcessedTypeParametersInfo typeParameters,
            ProcessedParametersInfo parameters,
            ProcessedReturnTypeInfo? returnType,
            string? implementationPrefix)
        {
            var stringBuilder = new StringBuilder();

            var typeParametersRendered = RenderTypeParameters(typeParameters);
            var parametersRendered = RenderParameters(parameters);
            // FIXME: It would be great to render comments here!

            var implementationPrefixWithSeparator = implementationPrefix == null
                ? string.Empty
                : $"{implementationPrefix}.";

            var returnTypeName = returnType == null
                ? "void"
                : returnType.TypeReference.TypeName;

            stringBuilder.Append($"{returnTypeName} {implementationPrefixWithSeparator}{methodOrConstructorName}{typeParametersRendered}({parametersRendered})");

            // Do not render type parameters for implementations.
            if (implementationPrefix == null && typeParameters.Items.Any())
            {
                stringBuilder.Append(Environment.NewLine);
                stringBuilder.Append(RenderIndented(
                    RenderTypeParameterConstraints(typeParameters),
                    1));
            }

            if (implementationPrefix == null)
            {
                stringBuilder.Append(';');
            }
            else
            {
                stringBuilder.Append(Environment.NewLine);
                stringBuilder.AppendLine("{");

                var renderedParameters = RenderParametersWithDotDotDotSupport(parameters);

                if (isConstructor)
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"return this.CallConstructor<{returnTypeName}>({renderedParameters});");
                }
                else
                {
                    if (returnType == null)
                    {
                        stringBuilder.AppendLine(RenderIndent(1) + $"this.InvokeVoidMethodByName(\"{internalMethodName}\", {renderedParameters});");
                    }
                    else
                    {
                        stringBuilder.AppendLine(RenderIndent(1) + $"return this.InvokeMethodByName<{returnTypeName}>(\"{internalMethodName}\", {renderedParameters});");
                    }
                }

                stringBuilder.Append('}');
            }

            return stringBuilder.ToString();
        }

        private static string RenderIndent(int levels)
        {
            var indentationBuilder = new StringBuilder();

            for (int level = 1; level <= levels; level++)
            {
                indentationBuilder.Append("    ");
            }

            return indentationBuilder.ToString();
        }

        private static string RenderPropertyForInterface(
            ProcessedPropertyInfo property,
            string? implementationPrefix)
        {
            var stringBuilder = new StringBuilder();

            var implementationPrefixWithSeparator = implementationPrefix == null
                ? string.Empty
                : $"{implementationPrefix}.";

            // FIXME: It would be great to render comments here!
            stringBuilder.Append($"{property.ReturnType.TypeReference.TypeName} {implementationPrefixWithSeparator}{property.PropertyName}");

            if (implementationPrefix == null)
            {
                stringBuilder.Append(' ');
                stringBuilder.Append('{');
                stringBuilder.Append(' ');

                if (property.Mode is ProcessedPropertyMode.GetterOnly or ProcessedPropertyMode.GetterAndSetter)
                {
                    stringBuilder.Append("get; ");
                }

                if (property.Mode is ProcessedPropertyMode.SetterOnly or ProcessedPropertyMode.GetterAndSetter)
                {
                    stringBuilder.Append("set; ");
                }

                stringBuilder.Append('}');
            }
            else
            {
                stringBuilder.Append(Environment.NewLine);
                stringBuilder.AppendLine("{");

                if (property.Mode is ProcessedPropertyMode.GetterOnly or ProcessedPropertyMode.GetterAndSetter)
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"get => this.GetPropertyOfObject<{property.ReturnType.TypeReference.TypeName}>(\"{property.NativePropertyName}\");");
                }

                if (property.Mode is ProcessedPropertyMode.SetterOnly or ProcessedPropertyMode.GetterAndSetter)
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"set => this.SetPropertyOfObject(\"{property.NativePropertyName}\", value);");
                }

                stringBuilder.Append('}');
            }

            return stringBuilder.ToString();
        }

        private static string RenderIndexerForInterface(
            ProcessedIndexerInfo indexer,
            string? implementationPrefix)
        {
            var stringBuilder = new StringBuilder();

            var implementationPrefixWithSeparator = implementationPrefix == null
                ? string.Empty
                : $"{implementationPrefix}.";

            // FIXME: It would be great to render comments here!
            var renderedParameter = RenderParameter(indexer.Parameter);
            stringBuilder.Append($"{indexer.ReturnType.TypeReference.TypeName} {implementationPrefixWithSeparator}this[{renderedParameter}]");

            if (implementationPrefix == null)
            {
                stringBuilder.Append(' ');
                stringBuilder.Append('{');
                stringBuilder.Append(' ');

                stringBuilder.Append("get; ");

                if (indexer.Mode == ProcessedIndexerMode.GetterAndSetter)
                {
                    stringBuilder.Append("set; ");
                }

                stringBuilder.Append('}');
            }
            else
            {
                stringBuilder.Append(Environment.NewLine);
                stringBuilder.AppendLine("{");

                stringBuilder.AppendLine(RenderIndent(1) + $"get => this.GetIndexerOfObject<{indexer.ReturnType.TypeReference.TypeName}>({indexer.Parameter.Name});");

                if (indexer.Mode == ProcessedIndexerMode.GetterAndSetter)
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"set => this.SetIndexerOfObject({indexer.Parameter.Name}, value);");
                }

                stringBuilder.Append('}');
            }

            return stringBuilder.ToString();
        }

        private static string RenderParameter(ProcessedParameterInfo parameter)
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.Append(parameter.TypeReference.TypeName);
            stringBuilder.Append(' ');
            stringBuilder.Append(parameter.Name);

            return stringBuilder.ToString();
        }
    }
}
