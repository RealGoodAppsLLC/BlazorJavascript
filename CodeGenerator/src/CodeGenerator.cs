using RealGoodApps.ValueImmutableCollections;
using System.Text;
using RealGoodApps.BlazorJavascript.CodeGenerator.Models.Processed;

namespace RealGoodApps.BlazorJavascript.CodeGenerator
{
    public class CodeGenerator
    {
        private readonly ProcessedInfo _processedInfo;
        private readonly string _outputDirectory;

        public CodeGenerator(
            ProcessedInfo processedInfo,
            string outputDirectory)
        {
            _processedInfo = processedInfo;
            _outputDirectory = outputDirectory;
        }

        public void Generate()
        {
            foreach (var interfaceInfo in _processedInfo.Interfaces.Items)
            {
                var interfaceFileContents = RenderInterfaceFileContents(interfaceInfo);

                var interfaceOutputPath = Path.Combine(
                    _outputDirectory,
                    "Interfaces",
                    $"{interfaceInfo.InterfaceName}.cs");

                if (File.Exists(interfaceOutputPath))
                {
                    throw new Exception($"File already exists: {interfaceOutputPath}");
                }

                File.WriteAllText(interfaceOutputPath, interfaceFileContents);
            }

            foreach (var classInfo in _processedInfo.Classes.Items)
            {
                var classFileContents = RenderClassFileContents(classInfo);

                var classOutputPath = Path.Combine(
                    _outputDirectory,
                    "Classes",
                    $"{classInfo.ClassName}.cs");

                if (File.Exists(classOutputPath))
                {
                    throw new Exception($"File already exists: {classOutputPath}");
                }

                File.WriteAllText(classOutputPath, classFileContents);
            }
        }

        private static string RenderInterfaceFileContents(ProcessedInterfaceInfo interfaceInfo)
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("/// <auto-generated />");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Attributes;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.BuiltIns;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Classes;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Interfaces");
            stringBuilder.AppendLine("{");

            stringBuilder.AppendLine($"{RenderIndent(1)}[JSObjectConstructor(typeof({interfaceInfo.InterfaceConstructor}))]");

            var typeParametersRendered = RenderTypeParameters(interfaceInfo.TypeParameters);

            stringBuilder.Append($"{RenderIndent(1)}public interface {interfaceInfo.InterfaceName}{typeParametersRendered}");

            stringBuilder.Append(" : ");

            foreach (var chainItem in interfaceInfo.ExtendsChain.Items)
            {
                stringBuilder.Append(chainItem.TypeReference.TypeName);
                stringBuilder.Append(", ");
            }

            stringBuilder.Append("IJSObject");
            stringBuilder.Append(Environment.NewLine);

            var typeParameterConstraints = RenderTypeParameterConstraints(interfaceInfo.TypeParameters);

            if (!string.IsNullOrWhiteSpace(typeParameterConstraints))
            {
                stringBuilder.AppendLine(RenderIndented(
                    typeParameterConstraints,
                    2));
            }

            stringBuilder.AppendLine(RenderIndent(1) + "{");

            var isFirstInterfaceElement = true;

            foreach (var constructor in interfaceInfo.Constructors.Items)
            {
                if (!isFirstInterfaceElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndented(
                    RenderMethodOrConstructorForInterface(
                        constructor.ConstructorName,
                        true,
                        null,
                        constructor.TypeParameters,
                        constructor.Parameters,
                        constructor.ReturnType,
                        null),
                    2));

                isFirstInterfaceElement = false;
            }

            foreach (var method in interfaceInfo.Methods.Items)
            {
                if (!isFirstInterfaceElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndented(
                    RenderMethodOrConstructorForInterface(
                        method.MethodName,
                        false,
                        method.NativeMethodName,
                        method.TypeParameters,
                        method.Parameters,
                        method.ReturnType,
                        null),
                    2));

                isFirstInterfaceElement = false;
            }

            foreach (var property in interfaceInfo.Properties.Items)
            {
                if (!isFirstInterfaceElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndented(
                    RenderPropertyForInterface(property, null),
                    2));

                isFirstInterfaceElement = false;
            }

            foreach (var indexer in interfaceInfo.Indexers.Items)
            {
                if (!isFirstInterfaceElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndented(
                    RenderIndexerForInterface(indexer, null),
                    2));

                isFirstInterfaceElement = false;
            }

            stringBuilder.AppendLine(RenderIndent(1) + "}");
            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }

        private static string RenderClassFileContents(ProcessedClassInfo classInfo)
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("/// <auto-generated />");
            stringBuilder.AppendLine("using Microsoft.JSInterop;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Attributes;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.BuiltIns;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Extensions;");
            stringBuilder.AppendLine("using RealGoodApps.BlazorJavascript.Interop.Interfaces;");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("namespace RealGoodApps.BlazorJavascript.Interop.Classes");
            stringBuilder.AppendLine("{");

            var typeParametersRendered = RenderTypeParameters(classInfo.TypeParameters);

            stringBuilder.AppendLine($"{RenderIndent(1)}public class {classInfo.ClassName}{typeParametersRendered} : {classInfo.InterfaceName}{typeParametersRendered}, IJSObject");

            var typeParameterConstraints = RenderTypeParameterConstraints(classInfo.TypeParameters);

            if (!string.IsNullOrWhiteSpace(typeParameterConstraints))
            {
                stringBuilder.AppendLine(RenderIndented(
                    typeParameterConstraints,
                    2));
            }

            stringBuilder.AppendLine(RenderIndent(1) + "{");

            stringBuilder.AppendLine(RenderIndent(2) + $"public {classInfo.ClassName}(IJSInProcessRuntime jsInProcessRuntime, IJSObjectReference jsObjectReference)");
            stringBuilder.AppendLine(RenderIndent(2) + "{");
            stringBuilder.AppendLine(RenderIndent(3) + "Runtime = jsInProcessRuntime;");
            stringBuilder.AppendLine(RenderIndent(3) + "ObjectReference = jsObjectReference;");
            stringBuilder.AppendLine(RenderIndent(2) + "}");
            stringBuilder.AppendLine();
            stringBuilder.AppendLine(RenderIndent(2) + "public IJSInProcessRuntime Runtime { get; }");
            stringBuilder.AppendLine(RenderIndent(2) + "public IJSObjectReference ObjectReference { get; }");

            foreach (var implementation in classInfo.Implementations.Items)
            {
                var implementationContents = RenderClassImplementation(implementation);

                if (string.IsNullOrWhiteSpace(implementationContents))
                {
                    continue;
                }

                stringBuilder.AppendLine();
                stringBuilder.AppendLine(RenderIndented(implementationContents, 2));
            }

            stringBuilder.AppendLine(RenderIndent(1) + "}");
            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }

        private static string RenderClassImplementation(ProcessedClassImplementationInfo implementationInfo)
        {
            var stringBuilder = new StringBuilder();

            var isFirstElement = true;

            foreach (var constructor in implementationInfo.Constructors.Items)
            {
                if (!isFirstElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderMethodOrConstructorForInterface(
                    constructor.ConstructorName,
                    true,
                    null,
                    constructor.TypeParameters,
                    constructor.Parameters,
                    constructor.ReturnType,
                    implementationInfo.Prefix));

                isFirstElement = false;
            }

            foreach (var method in implementationInfo.Methods.Items)
            {
                if (!isFirstElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderMethodOrConstructorForInterface(
                    method.MethodName,
                    false,
                    method.NativeMethodName,
                    method.TypeParameters,
                    method.Parameters,
                    method.ReturnType,
                    implementationInfo.Prefix));

                isFirstElement = false;
            }

            foreach (var property in implementationInfo.Properties.Items)
            {
                if (!isFirstElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderPropertyForInterface(property, implementationInfo.Prefix));
                isFirstElement = false;
            }

            foreach (var indexer in implementationInfo.Indexers.Items)
            {
                if (!isFirstElement)
                {
                    stringBuilder.AppendLine();
                }

                stringBuilder.AppendLine(RenderIndexerForInterface(indexer, implementationInfo.Prefix));
                isFirstElement = false;
            }

            return stringBuilder.ToString();
        }

        private static string RenderTypeParameters(ProcessedTypeParametersInfo typeParameters)
        {
            var typeParametersRendered = new StringBuilder();

            if (typeParameters.Items.Any())
            {
                typeParametersRendered.Append('<');
                typeParametersRendered.Append(string.Join(", ", typeParameters
                    .Items
                    .Select(i => i.Name)
                    .ToValueImmutableList()));
                typeParametersRendered.Append('>');
            }

            return typeParametersRendered.ToString();
        }

        private static string RenderTypeParameterConstraints(ProcessedTypeParametersInfo typeParameters)
        {
            var constraintsRendered = new StringBuilder();

            var isFirst = true;

            foreach (var typeParameter in typeParameters.Items)
            {
                if (!isFirst)
                {
                    constraintsRendered.Append(Environment.NewLine);
                }

                var constraintPart = typeParameter.Constraint == null
                    ? string.Empty
                    : $"{typeParameter.Constraint.Name}, ";

                constraintsRendered.Append($"where {typeParameter.Name} : class, {constraintPart}IJSObject");
                isFirst = false;
            }

            return constraintsRendered.ToString();
        }

        private static string RenderIndented(string text, int levels)
        {
            var indent = RenderIndent(levels);
            var lines = text.SplitIntoLines();

            var indentedString = new StringBuilder();

            var isFirst = true;

            foreach (var line in lines)
            {
                if (!isFirst)
                {
                    indentedString.Append(Environment.NewLine);
                }

                indentedString.Append($"{indent}{line}");
                isFirst = false;
            }

            return indentedString.ToString();
        }

        private static string RenderParameters(ProcessedParametersInfo parameters)
        {
            var parametersRendered = new StringBuilder();

            var isFirst = true;

            foreach (var parameter in parameters.Items)
            {
                if (!isFirst)
                {
                    parametersRendered.Append(", ");
                }

                parametersRendered.Append(RenderParameter(parameter));
                isFirst = false;
            }

            return parametersRendered.ToString();
        }

        private static string RenderParameterNames(ProcessedParametersInfo parameters)
        {
            var parameterNamesRendered = new StringBuilder();

            var isFirst = true;

            foreach (var parameter in parameters.Items)
            {
                if (!isFirst)
                {
                    parameterNamesRendered.Append(", ");
                }

                parameterNamesRendered.Append(parameter.Name);
                isFirst = false;
            }

            return parameterNamesRendered.ToString();
        }

        private static string RenderMethodOrConstructorForInterface(
            string methodOrConstructorName,
            bool isConstructor,
            string? internalMethodName,
            ProcessedTypeParametersInfo typeParameters,
            ProcessedParametersInfo parameters,
            ProcessedReturnTypeInfo? returnType,
            string? implementationPrefix)
        {
            var stringBuilder = new StringBuilder();

            var typeParametersRendered = RenderTypeParameters(typeParameters);
            var parametersRendered = RenderParameters(parameters);
            // FIXME: It would be great to render comments here!

            var implementationPrefixWithSeparator = implementationPrefix == null
                ? string.Empty
                : $"{implementationPrefix}.";

            var returnTypeName = returnType == null
                ? "void"
                : returnType.TypeReference.TypeName;

            stringBuilder.Append($"{returnTypeName} {implementationPrefixWithSeparator}{methodOrConstructorName}{typeParametersRendered}({parametersRendered})");

            // Do not render type parameters for implementations.
            if (implementationPrefix == null && typeParameters.Items.Any())
            {
                stringBuilder.Append(Environment.NewLine);
                stringBuilder.Append(RenderIndented(
                    RenderTypeParameterConstraints(typeParameters),
                    1));
            }

            if (implementationPrefix == null)
            {
                stringBuilder.Append(';');
            }
            else
            {
                stringBuilder.Append(Environment.NewLine);
                stringBuilder.AppendLine("{");

                var renderedParameterNames = RenderParameterNames(parameters);

                if (isConstructor)
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"return this.CallConstructor<{returnTypeName}>({renderedParameterNames});");
                }
                else
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"var methodObj = this.GetPropertyOfObject<JSFunction>(\"{internalMethodName}\");");

                    var parametersPrefix = string.IsNullOrWhiteSpace(renderedParameterNames) ? string.Empty : ", ";

                    if (returnType == null)
                    {
                        stringBuilder.AppendLine(RenderIndent(1) + $"methodObj.InvokeVoid(this{parametersPrefix}{renderedParameterNames});");
                    }
                    else
                    {
                        stringBuilder.AppendLine(RenderIndent(1) + $"return methodObj.Invoke<{returnTypeName}>(this{parametersPrefix}{renderedParameterNames});");
                    }
                }

                stringBuilder.Append('}');
            }

            return stringBuilder.ToString();
        }

        private static string RenderIndent(int levels)
        {
            var indentationBuilder = new StringBuilder();

            for (int level = 1; level <= levels; level++)
            {
                indentationBuilder.Append("    ");
            }

            return indentationBuilder.ToString();
        }

        private static string RenderPropertyForInterface(
            ProcessedPropertyInfo property,
            string? implementationPrefix)
        {
            var stringBuilder = new StringBuilder();

            var implementationPrefixWithSeparator = implementationPrefix == null
                ? string.Empty
                : $"{implementationPrefix}.";

            // FIXME: It would be great to render comments here!
            stringBuilder.Append($"{property.ReturnType.TypeReference.TypeName} {implementationPrefixWithSeparator}{property.PropertyName}");

            if (implementationPrefix == null)
            {
                stringBuilder.Append(' ');
                stringBuilder.Append('{');
                stringBuilder.Append(' ');

                if (property.Mode is ProcessedPropertyMode.GetterOnly or ProcessedPropertyMode.GetterAndSetter)
                {
                    stringBuilder.Append("get; ");
                }

                if (property.Mode is ProcessedPropertyMode.SetterOnly or ProcessedPropertyMode.GetterAndSetter)
                {
                    stringBuilder.Append("set; ");
                }

                stringBuilder.Append('}');
            }
            else
            {
                stringBuilder.Append(Environment.NewLine);
                stringBuilder.AppendLine("{");

                if (property.Mode is ProcessedPropertyMode.GetterOnly or ProcessedPropertyMode.GetterAndSetter)
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"get => this.GetPropertyOfObject<{property.ReturnType.TypeReference.TypeName}>(\"{property.NativePropertyName}\");");
                }

                if (property.Mode is ProcessedPropertyMode.SetterOnly or ProcessedPropertyMode.GetterAndSetter)
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"set => this.SetPropertyOfObject(\"{property.NativePropertyName}\", value);");
                }

                stringBuilder.Append('}');
            }

            return stringBuilder.ToString();
        }

        private static string RenderIndexerForInterface(
            ProcessedIndexerInfo indexer,
            string? implementationPrefix)
        {
            var stringBuilder = new StringBuilder();

            var implementationPrefixWithSeparator = implementationPrefix == null
                ? string.Empty
                : $"{implementationPrefix}.";

            // FIXME: It would be great to render comments here!
            var renderedParameter = RenderParameter(indexer.Parameter);
            stringBuilder.Append($"{indexer.ReturnType.TypeReference.TypeName} {implementationPrefixWithSeparator}this[{renderedParameter}]");

            if (implementationPrefix == null)
            {
                stringBuilder.Append(' ');
                stringBuilder.Append('{');
                stringBuilder.Append(' ');

                stringBuilder.Append("get; ");

                if (indexer.Mode == ProcessedIndexerMode.GetterAndSetter)
                {
                    stringBuilder.Append("set; ");
                }

                stringBuilder.Append('}');
            }
            else
            {
                stringBuilder.Append(Environment.NewLine);
                stringBuilder.AppendLine("{");

                stringBuilder.AppendLine(RenderIndent(1) + $"get => this.GetIndexerOfObject<{indexer.ReturnType.TypeReference.TypeName}>({indexer.Parameter.Name});");

                if (indexer.Mode == ProcessedIndexerMode.GetterAndSetter)
                {
                    stringBuilder.AppendLine(RenderIndent(1) + $"set => this.SetIndexerOfObject({indexer.Parameter.Name}, value);");
                }

                stringBuilder.Append('}');
            }

            return stringBuilder.ToString();
        }

        private static string RenderParameter(ProcessedParameterInfo parameter)
        {
            var stringBuilder = new StringBuilder();

            stringBuilder.Append(parameter.TypeReference.TypeName);
            stringBuilder.Append(' ');
            stringBuilder.Append(parameter.Name);

            return stringBuilder.ToString();
        }
    }
}
